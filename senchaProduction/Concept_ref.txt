1. 접근성 

1-1. 소개 
	: Ext JS 5에서는 Section 508 및 ARIA 규약준수가 필요한 개발자들에게 필요한 도구를 제공항으로서 높은 수준의 접근성을 갖는 어플리케이션 개발이 가능하도록 했다.
	
1-2. 접근성 개요
	: 소프트웨어에서 접근성은 무엇을 의미하는가? 일반적으로, 접근성은 어플리케이션의 기능과 컨텐츠가 다음 대상에게 제공되는 것을 의미한다.
	
	- 시각적으로 장애를 갖는 사람
	- 컴퓨터 사용을 위해 스크린 리더와 같은 보조 장치에 의존하는 사람
	- 어플리케이션 탐색을 위해 마우스 사용이 불가능 한 사람
	
	: 1998년, 미국 의회는 "Section 508 Amendment to the Rehabilitation Act of 1973"을 통과시켰다. 이 법은 섹션 508로 더 잘 알려져 있는데, 모든 연방 기구는 장애를 갖는 이들이 읽을 수 있도록 전자정보를 생성하도록 규정하고 있다.
	 섹션 508 접근성은 미 정부 기관에서 사용하는 어플리케이션을 개발하느 모든 이들이 준수해야할 요구사항이 되었다.
	  웹 어플리케이션의 경우 Web Accessibility Initialtive's의 가이드라인을 준수함으로서 섹션 508 호환성 확보에 획지적인 발전을 가져오게 되었다. 그 가이드라인이 바로 ARIA로서 WAI-ARIA라고도 불리우며 본래 명칭은 
	 Accessible Rich Internet Application Suite이다.

1-3. Ext JS의 접근성
	: Ext JS의 내장 탭 인덱싱과 포커스 관리 능력에 힘입어 브라우저에서 탭과 포커스는 사용자가 기대하는 바를 충족한다. 이러한 접근방법에 기반하여 센차 개발진은 컴포넌트를 디폴트 키보드 네비게이션 행위로 수용가능한 아이템으로 변환하기 위해 노력했다.
	  Ext JS 5의 접근성 지원은 포커스를 통한 키포드 네비게이션과 DOM 속성 두가지에 중점을 두고 설계 되었다. Ext JS 5.0.1에서는  포커스와 키보드 네비게이션 기능은 focusable로 알려져 있는 클래스 수준 속성에 따라 "항상 가능" 상태이다.
	  포커스는 개발자에 의해 업그레이드에 따라 추가적인 변경이 필요없다.
	
	1). 포커스 스타일링(Focus Styling)
		: 포커스 스타일링은 키보드 이벤트나 다른 사용자 입력을 수용하기 위해 준비된 엘리먼트에 대해 시각적 알림(Visually Indicationg) 방법에 관한 것으로 설명된다. 시각적 알림은 접근성 확보와 일부 키보드 네비게이션에 완전히 의존하는 파워 유저들을
		 대상으로 필수적이며 그만한 가치가 있다.
		  프레임워크는 현재 포커스 된 컴포넌트 혹은 변경된 컴포넌트에 대한 명확한 알림을 제공한다. 이 시각적 알림은 포커스 된 컴포넌트의 내부 테두리(Inner Border)와 본체 테두리(Body Border)의 변화를 이용하게 되며 어플리케이션 테마에 따라 다소
		 표현하는 방식은 다를 수 있다. 이러한 시각적 측면의 변화를 제어하기 위해 포커스에 관한 여러개의 Sass변수와 믹스인 파라미터를 사용할 수 있다.
		 
	2). 버튼
		: 이전 버전에서 버튼의 포커스 스타일링은 hover 스타일로 일부 유저들에게 혼란을 야기했었다. 버전 5.0.1에서 버튼은 "inner"테두리 방식으로 포커스 스타일링을 변경헀다. Neptune 및 Crisp 테마에서는 버튼의 외곽선 내부에 1px짜리 실선 경게를 그리는
		 방식을 취했다.
		  클래식 테마에서는 포커스 테두리는 "Windows" 스타일과 유사하게 버튼의 내부 요소 주위로 점선을 그리는 방식이다.
		  포커스된 버튼에 호버, 호버 상태에서 눌림 상태에 대한 스타일링 변경이 필요할 수 있다. 이를 위해 2가지 추가적인 버튼 상태, 즉 "focus-over"와 "focus-pressed"에 대한 Sass 변수를 추가했으므로 필요 시 이 두 변수를 적당히 수정하면 된다.

	3). 탭
		: 탭은 과거에 포커스에 대한 시각적 알림 기능이 없었다. Ext JS 5.0.1에 와서야 탭은 버튼과 유사헥 취급되기 시작했다. Neptune/Crisp테마에서는 실선 내부 테두리로, 클래식 테마에서는 점선 외관선 형태로 포커스를 표시한다. Crisp:
		
		  Classic:
		
		  버튼과 마찬가지로 "focus-over", "focus-active" 상태를 제어하기 위한 SASS 변수도 준비되어 있다.
		  
   4). 그리드
   		: 포커스 된 그리드 셀은 아래와 같이 명확한 포커스 스타일링을 갖는다. 추가적으로 그리드 컬럼 헤더는 아래 예에서 볼 수 있느 것과 같이 돍립적인 포커스를 갖을 수 있다.
   		
   5). 포커스 스타일링과 커스터마이징
   		: 키보드 네비게이션은 좀 더 많은 사용자들을 배려함으로서 다양한 어플리케이션에서 각광받을 것으로 기대되는 기능이다. 동시에 모든 어플리케이션의 제각기 다른 요구사항 충족을 위해 Sass 변수 및 믹스인에 기반한 API를 사용하는 컴포넌트라면 스타일의
   		 커스터마이징이 가능하도록 헀다.
   		  포커스 스타일링이 가능한 모든 변수는 변수 이름에 "focus"라는 키워드를 사용하고 있으므로 식별하기 쉽다. 어떤 컴포넌트에 대한 스타일을 변경하고 싶을 경우 클래스 문서의 "CSS Variables" 섹션을 찾아보자
   		  예를 들어, "default" 버튼 UI의 포커스 테두리 스타일을 바꾸고 싶을 경우, $button-default-inner-border-color-focus Sass이란 변수를 사용하고 있을 것이다. 어플리케이션에서 Sass를 활용하는 방법은 Theming Guide를 참고하라.
   
   6). 키보드 네비게이션
   		: 어플리케이션의 포커스 가능한 컴포넌트는 마우스 없이 완전히 커보드만으로 포커스 이동이 가능하다. Ext JS 관점에서 이것은 Tab 키를 누르면 URL 바로부터 시작해서 어플리케이션 도큐먼트 바디에 포함된 다음번 포커스 가능한 컴포넌트로 포커스가 이동하게 됨을 
   		 의미한다.
   		  그러나 툴 바와 같은 일부 컴포넌트는 약간 다른 포커스 특성을 갖고 있어서 Tab키는 툴 바 사이를 이동하고 툴 바 내부 이동은 화살표 키를 사용해야 하낟. 이것은 WAi-ARIA 표준에 따라 과도한 Tab키 사용을 피해 사용성을 보장하기 위한 것이다.
   		  예를 들어 여러 개의 버튼을 포함한 두 개의 툴 바를 보면, Tab키를 한 번 누르면 위에서 보는 것과 같이 버튼1에 포커스가 이동할 것이다. 다시 한번 Tab키를 누르면 포커스 이동 가능한 다음 컴포넌트로 포커스가 이동할 것이다. 이와 같은 경우 다음번 포커스가
   		 가능한 아이템은 버튼, 탭, 폼 필드, 그리드 등이 있다.
   		  또한 포커스의 역방향 이동을 위해서는 "Shift+Tab"을 이용하면 탭 인덱스의 역방향 탐색이 가능하다. 위 예에서 툴 바 내부의 아이템 탐색을 위해서는 화살표 키를 이용해서 툴 바 내부 버튼을 이동할 수 있고 마지막 버튼 4까지 이동한 경우 다시 버튼 4까지
   		 이동한 경우 다시 버튼 1로 이동하는 순환 구조가 된다.
   		  만약 툴 바에서 포커스를 이동시키기 위해서 Tab키를 누르고 다시 Shift+Tab을 누르면 프레임워크는 마지막에 포커스를 갖고 있던 버튼에 포커스를 이동시킨다. 이는 툴 바와 다른  포커스 기능 컨테이너에 대한 상태를 내부적으로 관리하기 때문에 가능하다.
   		  주의). 입력 필드로 진입하면 화살표 키 네비게이션은 당연히 그 입력 필드 내부에서만 작동하게 된다. 다른 컴포넌트로 이동을 위해서는 Tab 똔느 Shift+Tab으로 입력 필드에서 빠져나와야 한다.
   
   7). DOM 속성
   		: 컴포넌트의 DOM 속성은 엘리먼트 타입, 상태 및 설명에 대한 의미있는 정보제공을 위해 반드시 속성(Attribute)를 사용해야 한다. 이런 속성들은 스크린 리더와 같은 보조 기술(Assistive Technology)에 의해 사용되어 사용자에게 음성 신호를 제공하는데,
   		 2개의 서로 분리된 그룹으로 분류할 수 있다.
   
   8). ARIA 롤(Roles)
   		: ARIA 롤은 컴포넌트 또는 엘리먼트 타입의 주 표시자로서 영구적이고 컴포넌트와 사용자의 상호작용에 의해 변경되지 않는다. Ext JS에서 ARIA 롤이 대표적으로 사용되는 것은 위젯 롤이다. 위젯 롤은 대부분은 Ext JS  컴포넌트와 일치하며 예로서 그 일부는
   		 다음과 같다.
   		 
   		 - 툴 바(Toolbar)
   		 - 탭 바와 탭(Tab bars and tabs)
   		 - 체크박스(Checkboxes)
   		 - 라디오 버튼(Radio Buttons)
   		 - 버튼(Buttons)
   		 - Breadcrumb Groups 
   
   9). ARIA 상태(States) 및 속성들(Properties)		
		: DOM 속성들은 사용자의 조작이나 어플리케이션 상태에 따라 변경될 수 있는 속성들이다. ARIA 상태(State)의 예는 체크박스에 적용된 "aria-checked" 속성을 들 수 있다. 유사하게 ARIA 소것ㅇ(Property)은 폼 필드로 validation 혹은 사용자 입력에 의해 
		 동적으로 변경될 수 있는 "aria-invalid" 속성을 예로 들 수 있다.
		  ARIA 상태 및 속성을 활성화 하는 방법은 아래 ARIA 패키지 내용에서 상세하게 기술하였다.
		
1-4. ARIA 패키지
	: "ext-aria" 패키지는 분리된 Cmd 패키지로서 ARIA 상태 및 속성을 지원하기 위해 제공된다. "Ext-aria"패키지는 app.json에 포함될 수 있고 다른 패키지와 별도로 분리되어야 한다.
	
	ex)
		 "requires" : {
		 	"ext-aria"
		 }, 
	
	# app.json 파일을 수정하고 나면 어플리케이션을 리빌드 해야한다. 빌드가 완료되면, 위에서 설명한 ARIA상태 및 속성이 컴포넌트에 부여된다.
	# 또한 만약 "ext-theme-aria" 테마를 사용해서 어플리케이션을 작성했다면 "ext-aria" 패키지를 직접 app.json에 포함 시킬 필요는 없다. 'ext-theme-aria'는 'ext-aria' 패키지를 기본으로 사용하는데, 'ext-theme-aria'를 사용하는 방법에 대해서는
	 다음 섹션에서 다루기로 하자.
	# 주의) 위에서 설명한 어플리케이션 빌드에 대해 모르겠다면, 센차의 Getting Started Guide를 참고. 

1-5. ARIA 테마	  	 
	: "ext-theme-aria"는 시각적 장애를 갖는 사용자를 위한 고대비 테마로서 사용자 설정에 따라 look&feel 변경이 가능하다. Ext JS ARIA 테마를 어플리케이션에 적용하기 위해서는 app.json의 테마 블럭을 다음과 같이 수정하면 된다.
	
	ex)
		"theme" : "ext-theme-neptune",
	# 위는 아래와 같이 바뀌어야 한다.
	
	ex)
		"theme" : "ext-theme-aria",
	# app.json 파일이 수정되었으므로 어플리케이션을 다시 빌드하고나면 어플리케이션은 'ext-theme-aria'테마가 적용되어 아래와 같을 것이다.
	 
2. 클래스 시스템
	: 이 장에서는 Ext JS 4.x와 5.x에서 사용하는 기존 클래스를 확장하거나 새로운 클래스를 만들기 위한 내용을 설명한다.
2-1. 개요
	 : Ext JS 5는 300개 이상의 클래스로 구성되어 있다. Ext JS를 사용하는 개발자는 2백만 이상으로 다양한 배경과 위치에 분포한다. 이러한 구도에서 센차 개발진은 다음과 같은 일반적 코드 아키텍처를 제공해야 하는 큰 도전에 직면했었다.
	 
	 - 친숙하고 배우기 쉬울 것
	 - 빠른 개발, 쉬운 디버그, 고통 없는 배포
	 - 조직되고 확장가능하면 유지보수 가능
	 
	 : 자바 스크립트는 클래스가 없고 프로토타입 지향적(Prototype-oriented) 언어이기 때문에 한가지 강력한 기능이라면 바로 유연함이 될 것이다. 서로 다른 코딩 스타일과 기법을 사용함으로해서 발생되는 문제를 해결하는 방법은 다양하지만, 
	  예측불가능한 비용과 함께라면 곤란할 것이다. 또한 통일되지 않은 구조의 자바스크립트 코드는 재사용, 유지보수 및 이해가 어려운 것은 잘 알려진 사실이다.
	   반면에 클래스 기반 프로그래밍은 객체지향 프로그래밍의 가장 대중적인 모델로서, 클래스 기반 언어들은 일반적으로 변수 형식에 대한 강한 제약(strong-typing), 캡슐화, 표준 코딩 규칙 등을 요구한다. 개발자에 의해 더해진 이런 저런 원칙들로 인해서
	  코드는 향후 예측, 확장성 등을 시간의 흐름에 따라 갖게 되는데 이러한 모델은 자바스크립트가 갖는 동적인 능력은 보유하지 못한다.
	   각각의 접근 방식은 장단점이 있지만 양쪽의 나쁜 부분은 숨기고 좋은 점만 취할 수 있지 않을까? 센차의 대답은 그렇다로서 그 Ext JS에서 그 해답을 찾을 수 있을 것이다.

2-2. 명명 규칙(Naming Conventions)
	: 코드에서 클래스, 네임스페이스, 파일이름 등에 걸쳐 일관된 명명 규칙을 사용하는 것은 코드를 잘 조직화하고 구조화하며 가독성을 높이는데 도움을 준다.
	
	1) 클래스
		: 클래스 이름은 알파벳 및 숫자(alphanumeric)만 사용할 수 있으며, 기술적 용어에 포함된 숫자를 제외하고 숫자는 허용되지만 권장되지는 않는다. "_"(언더스코어), "-"(하이픈)과 알파벳 및 숫자가 아닌 문자는 클래스 이름으로 사용할 수 없다. 
		 예를 들면 다음과 같다.
		 
		 - MyCompany.useful_util.Debug_Toolbar // 사용 불가
		 - MyCompany.util.Base64 // 사용 가능
		
		: 클래스 이름은 적정한 네임스페이스를 명시하는 객체 속성 점 표시법(Object property dot-notation)에 의해 (.)으로 구분되어 패키지에 그룹으로 묶어야 하며, 최소한 하나의 유니크한 최상위 네임 스페이스에 속해야 한다. 에를 들면.
		
		ex) 
			MyCompany.data.CoolProxyMyCompany.Application
		
		# 최상위 네임 스페이스와 실제 클래스 이름은 카멜 표기법을 따라야 한다.	 
		
		ex) 
			MyCompany.form.action.AutoLoad
		
		# 센차에서 배포하지 않는 클래스는 절대 최상위 네임 스페이스로 Ext를 사용할 수 없다. 축약어 역시 위에서 설명한 카멜 표기법에 따라서 작성한다.
		
	2) 소스 파일
		: 클래스 맵의 이름은 직접적으로 저장되는 파일 경로를 나타낸다. 그 결과로 반드시 파일 하나당 한 클래스만 포함해야 한다.
		
		- Ext.util.Observable 클래스는 path/to/src/Ext/util/Observable.js에 저장되고
		- Ext.form.action.Submit 클래스는 path/to/src/Ext/form/action/Submit.js
		- MyCompany.chart.axis.Numeric은 path/to/src/MyCompany/chart/axis/Numeric.js
		
		# 위에서  path/to/src는 어플리케이션 클래스의 디렉토리 경로를 의미한다. 모든 클래스는 최적의 개발, 유지보수 및 배포를 위해 반드시 위의 저장 규칙과 네임 스페이스 규칙을 준수해야 한다.
	
	3) 메서드와 변수
		- 클래스 이름과 비슷한 유형으로 메서드와 벼수 이름도 알파벳 및 숫자(alphanumeric)로만 구성되어야 한다. 기술적 용어로서 숫자를 제외하고 숫자는 허용은 되지만 권장되는 않는다. 언더스코어(_), 하이픈(-) 및 알파벳/숫자를 제외한
		 다른 문자는 사용할 수 없다.
		- 메서드 및 변수 이름은 항상 카멜 표기법에 따라야 한다. 축약어도 마찬가지다.
	
		예제)
			3-1) 허용되는 메서드 이름 :
				- encodeUsingMd5()
				- getHtml()
				- getJsonResponse()
				- parseXmlContent()
			3-2) 허용되는 변수 이름 :
				- var isGoodName
				- var base64Encoder
				- var xmlReader
				- var httpServer
				 
	5) 속성
		- 클래스 속성 이름은 상수(static constants)일 경우를 제외하고 위에서 설명한 규칙을 그대로 따른다.
		- 상수 클래스 속성은 반드시 모두 대문자로 표기한다. 예를 들면,
			5-1) Ext.MessageBox.YES = "YES"
			5-2) Ext.MessageBox.NO = "NO"
			5-3) MyCompany.alien.Math.PI = "4.13"
	
2-3. 선언
	1) 예전 방식
		: Ext JS 4버전까지의 이전 버전을 사용하고 있다면 필시 다음과 같이 클래스 생성을 위한 Ext.exend 사용이 친숙할 것이다.
		
		ex)
			var MyWindow = Ext.extend(Object, {...});
		
		# 이 방식은 어떤 클래스로부터 파생하여 새로운 클래스를 생성할 때 손쉬운 방식이다. 클래스를 생성할 때 직접적인 상속을 대신할만한 다른 유연한 API를 갖지 못한것도 사실이다. 이번 챕터에서는 설정, 상수, 믹스인 같은 것들은 제외하고 나중에 
		 다루기로 하자. 다른 샘플을 보자
		
		ex)
			My.cool.Window = Ext.extend(Ext.Window,{...});
		
		# 이 예제에서는 새로 만들 클래스에 네임 스페이스를 사용하고, Ext.Window 클래스를 상속하고 있다. 여기에 우리가 다루고자 하는 두가지 주제가 있다. 
			1-1) My.cool은 Window를 속성으로 할당하기 전에 미리 존재하는 객체를 필요로 한다.
			1-2) Ext.Window는 참조 가능한 상태 이전에 페이지에서 객체가 존재하고 로딩이 완료되어 있어야 한다.
			
		# 첫번째 문제는 보통 Ext.namespace(줄여서 Ext.ns)를 통해 해결 가능하다. 이 방법은 객체와 속성 트리를 검사해서 없다면 생성해 준다. 참고로 Ext.ns를 사용하는 방법은 Ext.extend가 나오기 전에 적용되어야 한다.
		
		ex) 
			Ext.ns('My.cool');
			My.cool.Window = Ext.extend(Ext.Window, {...});
			
		# 두번째 이슈는 Ext.Window가 많은 다른 클래스에 의존성을 갖을 수 있기 때문에 쉽게 해결할 수 있는 문제는 아니라는 점이다. 이러한 의존성 문제는 다른 클래스의 존재 유무에 따라 의존적이기 때문에 Ext JS 4 이전에 작성된 어플리케이션
		 코드들은 ext-all.js 형태로 라이브러리 전체를 include 해버렸다. 비록 프레임워크의 아주 일부분만 필요로 할지라도 말이다.
	
	2) 새로운 방식
		: Ext JS 4는 클래스 생성 시 Ext.define이라는 싱글 메서드 사용을 통해 이러한 약점을 제거했다. 기본적인 문법은 다음과 같다.
		
		ex)
			Ext.define(className,members,onClassCreated);
		
		- ClassName : 클래스 이름
		- Members : 클래스 멤버의 집합 객체, 키-값의 쌍
		- OnClassCreated : 선택적인 콜백 함수, 의존 관계 클래스가 준비완료되고 클래스 자신의 생성이 완료되면 호출된다. 클래스 생성의 비동기적 생태 때문에 이 콜백 함수는 다양한 경우에 유용하게 사용도리 수 있다. 섹션 4에서
		
		ex) 
			Ext.define('My.sample.Person',{
				name : 'Unknown',
				constructor : function(name){
					if(name){
						this.name = name;
					}
				},
				eat : function(foodType){
					alert(this.name + "is eating : " + foodType);
				}
			});  
			
			var aaron = Ext.create('My.sample.Person', 'Aaron');
			aaron.eat("Salad");
			
		# 주의) My.sample.Person 클래스의 새 인스턴스를 만들 때 Ext.create()를 사용했다. 이때 new 키워드를 사용해서 newMy.Sample.Person()과 같이 인스턴스를 만들 수도 있지만 Ext JS가 지원하는 동적 로딩(dynamic loading)의 장점을 취하기 위해서는 
		 항상 Ext.create() 메서드 사용을 권장한다. 동적 로딩에 관한 상세한 사항은 Getting Started Guide를 참조하자.
		
	3) 설정(Configuration)
		: Ext JS 4에서 클래스 생성 전에 Ext.Class 전처리기에 의해 처리되는 config 프로퍼티에 대해 소개했엇다. 여기에 포함된 기능은 다음과 같다.
		
			- Config 프로퍼티는 다른 클래스 멤버로부터 완전히 캡슐화 되어 분리
			- 모든 config 프로퍼티에 대한 Getter와 Setter메서드는 메서드가 정의되어 있지 않더라도 클래스 프로토타이핑을 통해 자동으로 생성
			- apply 메서드가 모든 config 프로퍼티에 대해 생성됨. 자동 생성되는 setter메서드는 값을 세팅하기 전에 내부적으로 apply 메서드를 호출한다. 만약 값 설정 전 이 로직에 대한 커스터마이징이 필요하다면 config 프로퍼티에 대한 apply메서드를 오버라이딩 할 수 있다.
			 또한, apply 메서드의 리턴 값이 없으면 setter는 값을 설정하지 않는다.
	 	
	 	: config를 사용하는 Ext 클래스는 Ext JS 5에 접어들어 initConfig()를 수동으로 호출해야 하는 불편을 없앴다. 그러나, 만약 사용자의 클래스가 Exdt.Base를 상속하여 확장한 클래스라면 initConfig() 메서드의 수동 호출은 반드시 필요하다는 점을 유념하자. 
	 	 설정에 대한 예제는 다음과 같다.
	 	 
	 	ex)
	 		Ext.define('My.own.Window',{
	 			isWindow : true,
	 			config : {
	 				title : 'Title Here',
	 				bottomBar : {
	 					height : 50,
	 					resizable : false
	 				}
	 			},
	 			
	 			applyTitle : function(title){
	 				if(!Ext.isString(title) || title.length === 0){
	 					alert('Error : Title must be a valid non-empty string');
	 				}
	 				else{
	 					return title;
	 				}
	 			},
	 			
	 			applyBottomBar : function(bottmBar){
	 				if(bottomBar){
	 					if(!this.bottomBar){
	 						return Ext.create('My.own.WindowBottomBar',bottomBar);
	 					}
	 					else{
	 						this.bottomBar.setConfig(bottomBar);
	 					}
	 					
	 				}
	 			}
	 			
	 		});  
	 	 
	 	 	Ext.define('My.own.WindowBottomBar',{
	 	 		config : {
	 	 			heigth : undefined,
	 	 			resizable : true
	 	 		}
	 	 	});
	 	 	
 	 	# 그리고 어떻게 사용되었는지에 대한 예는 다음과 같다.
 	 	
 	 	ex)
 	 		var myWindow = Ext.create('My.own.Window',{
 	 			title : 'Hello World',
 	 			bottomBar : {
 	 				heigth : 60
 	 			}
 	 		});
 	 		
 	 		alert(myWindow.getTitle());					// alerts "Hello World"
 	 		myWindow.settitle('Something New');
 	 		alert(myWindow.getTitle());					// alerts "Something New"
 	 		myWindow.setTitle(null);					// alerts "Error : Title must be a valid non-empty string"
 	 		myWindow.setBottomBar({height : 100});		
 	 		alert(myWindow.getBottomBar().getHeight());	// alerts 100
	
	4) 상수 멤버(Statics)
		: 상수 멤버는 statics config를 이용해 설정할 수 있다.
		
		ex)
			Ext.define('Computer',{
				statics: {
					instancesCount:0,
					factory : function(brand){
						return new this({brand:brand});
					}
				},
				config : {
					brand : null
				}
			});
			
			var dellComputer = Computer.factory('Dell');
			var appleComputer = Computer.factory('Mac');
			alert(appleComputer.getBrand());
			
2-4. 에러 핸들링 & 디버깅
	: Ext JS는 디버깅과 에러 처리를 위한 몇가지 유용한 기능을 제공한다.
		
		- Ext.getDisplayName()을 사용하여 어떤 메서드라도 display name을 얻을 수 있다. 오류가 발생하는 클래스와 메서드를 알려주기 때문에 유용하다. 
		 throw new Error('['+ Ext.getDisplayName(arguments.callee) + '] Some message here');
		- Ext.define()에서 정의된 아무 클래스의 어떤 메서드에서 오류가 발생되면, WebKit 기반의 브라우저(크롬 또는 사파리)를 사용하고 있다면 call stack에서 메서드와 클래스 이름을 확인 할 수 있다. 크롬의 경우 아래와 같은 형식이다.

3. 컴포넌트
	: 모든 Ext JS 어플리케이션 UI는 컴포넌트라고 불리우는 하나 이상의 위젯으로 구성되어 있다. 모든 컴포넌트는 Ext.Component의 서브 클래스로서 인스턴스 생성, 랜더링, 사이즈 및 위치, 소멸까지 자동화된 생명주기 관리를 받게 된다.
	 Ext JS는 독창적이고 광범위한 범위의 컴포넌트를 제공하며, 제공되는 모든 컴포넌트는 커스터마이징된 컴포넌트로 손쉽게 확장이 가능하다.
	 
3-1. 컴포넌트 계층도(The Component Hierarchy)	 
	: 컨테이너는 다른 컴포넌트를 담을 수 있는 특별한 타입의 컴포넌트이다. 일반적인 어플리케이션은 트리 형태의 구조를 갖는 많은 컴포넌트의 연결 구성을 통해 완성되는데, 이를 바로 컴포넌트 계층도라고 한다. 컨테이너는 자식 컴포넌트의 생명주기(lifecycle)-생성,
	 랜더링, 사이즈 및 위치 결정, 그리고 소멸 관리를 담당할 책임이 있다. 일반적인 어플리케이션의 컴포넌트 계층도는 맨 위에 뷰포트(Viewport)로 시작해서 다른 컨테이너나 컴포넌트들이 하위로 붙는 형식을 취한다.
	 
	: 컨테이너에 추가된 자식 컴포넌트는 컨테이너의 items 설정 프로퍼티를 사용해서 추가되는데 아래 예제는 Ext.create()를 사용해서 2개의 패널 인스턴스를 만들고 뷰포트의 자식 컴포넌트로 생서하는 예를 제시한다.
	
	ex)
		var childPanel1 = Ext.create('Ext.panel.panel',{
			title : 'Child Panel 1',
			html : 'A Panel'
		});
		
		var childPanel2 = Ext.create('Ext.panel.Panel',{
			title : 'Child Panel 2',
			html : 'Another Panel'
		});
		
		Ext.create('Ext.container.Viewport',{
			items : [childPanel1, childPanel2]
		});
		
		# 컨테이너는 자식 컴포넌트의 위치와 크기를 관리하기 위해 Layout Manager를 사용한다. 레이아웃과 컨테이너에 대한 자세한 사항은 Layouts and Containers Guide를 참고
		
3-2. XTypes과 게으른 인스턴스화(Lazy Instantiation)
	: 모든 컴포넌트는 xtype이라고 하는 상징적 이름(Symbolic Name)을 갖는다. 예를 들어 Ext.panel.Panel의 xtype은 'panel'이다. 위 예제에서는 어떻게 미리 인스턴스로 생성된 컨테이너에 컴포넌트를 추가하는지를 보여주는데, 대형 어플리케이션에서는 
	 모든 컴포넌트의 인스턴스가 즉시 생성될 필요는 없기 때문에 위의 경우는 일반적인 것은 아니라고 할 수 있다.
	  일부 어떤 인스턴스는 어플리케이션 운용에 따라 한번도 인스턴스로 생성될 필요가 없는 경우도 가정할 수 있다. 예를 들어, Tab Panel을 사용하는 어플리케이션은 사용자가 각 탭을 클릭했을 때만 각 탭의 컨텐츠를 랜더링 되도록 하면 될 것이다.
	  이러한 이유로 xtype을 통해 컨테이너의 자식 컴포넌트들의 설정이 먼저 완료되고 난 후, 컨테이너가 필요하다고 결정한느 시점까지 인스턴스는 만들지 않는 것이다. 이렇게 설정은 먼저 해놓고 필요한 시점까지 인스턴스 생성을 미뤄두는 것을 게으른 인스턴스화라고 한다.
	  애래의 예제 코드는 게으른 인스턴스화 및 컨테이너의 자식 컴포넌트인 탭 패널 랜더링을 보여준다. 각각의 탭은 이벤트 리스너를 갖고 있어서 탭이 랜더링 되면 메시지를 띄어준다
	   
	ex)
		Ext.create('Ext.tab.Panel',{
			renderTo : Ext.getBody(),
			height : 100,
			width  : 200,
			itmes : [
				{
					xtype : 'panel',
					title : 'Tab One',
					html : 'The first tab',
					listeners : {
						render : function(){
							Ext.MessageBox.alert('Rendered One', 'Tab One was rendered');
						}
					}
				},
				{
					title : 'Tab Two',
					html : 'The second tab',
					listeners : {
						render : function(){
							Ext.MessageBox.alert('Rendered One', 'Tab Two was rendered');
						}
					}
				}
			]
		});
	
	# 이 코드를 실행하면 첫번째 탭이 랜더링 되면서 즉시 메시지 창이 뜬다. 이것은 기본저긍로 설정된 Active 탭 때무네 그런것으로 컨테이너 탭 패널은 탭을 즉시 랜더링 한다.
	
	# 두번째 탭에 대한 메시지 창은 탭을 클릭하기 전까지는 나타나지 않는다. 필요한 시점까지 탭이 활성화 되지 않아 render 이번트를 발생시키지 않으므로 탭은 랜더링 되지 않기 때문이다.
	
3-3. 보여주기와 감추기
	: 모든 컴포넌트는 내장된 show, hide 메서드를 갖고 있다. hide 메서드를 처리하기 위한 디폴트 CSS메서드는 "display:none"인데, hideMode 설정 프로퍼티에서 변경할 수 있다. 
	 "(.javascript) var panel = Ext.create('Ext.panel.Panel', { renderTo : Ext.getBody, title  :'Test', html : 'Test Panel', hideMode : 'visibility' // show, hide 처리를 위해 CSS visibility 프로퍼티를 사용})"
	 panel.hide(); // 이 컴포넌트를 감춘다 panel.show(); // 이 컴포넌트를 보여준다.
	 
	 ex)
	 	--플로팅 컴포넌트(Floating Components)
	 		: 플로팅 컴포넌트는 문서의 ㅂ까에 위치한 것으로 CSS absolute 위치를 사용하며 컨테이너의 레이아웃에 영향을 받지 않는다. 일부 Window와 같은 컴포넌트들은 기본적으로 Floating 속성인데, 이러한 플로팅 속성은 floating 설정을 통해 지정할 수 있다.
	 	
	 	...{.javascript}
	 	var panel = Ext.create('Ext.panel.Panel',{
	 		width : 200,
	 		height : 200,
	 		floating : true,
	 		title : 'test',
	 		html : 'Test Panel'
	 	});
	 	
	# 위 코드에서는 패널 인스턴스를 생성하지만, 랜더링 하지는 않았다. 보통의 컴포넌트는 renderTo 설정이 지정되거나 또는 컨테이너의 자식 컴포넌트로 추가되기 때문인데, 플로팅 컴포넌트는 두가지 경우가 다 아니더라도 상관없다. 플로팅 컴포넌트는 첫번째 show 메서드가
	 호출될 때 자동으로 document body에 랜더링 되기 때문이다.
	
	ex)
		panel.show(); // 플로팅 컴포넌트를 랜더링하고 보여준다.
		
	# 플로팅 컴포넌트에 관해 주의할 몇가지 다른 설정 프로퍼티와 메서드를 모자
	
		- draggable : 플로팅 컴포넌트를 드래그 가능하게 설정한다.
		- shadow : 플로팅 컴포넌트의 그림자가 보이게 설정한다.
		- alignTo() : 특정 엘리먼트에 대해 플로팅 컴포넌트를 정렬한다.
		- center() : 플로팅 컴포넌트를 컨테이너의 중심에 위치시킨다.

3-4. 커스텀 컴포넌트 만들기
	
	1) 새로운 구성 또는 상속을 통한 확장
		: 새로운 UI 클래스를 만들 때 Component의 자체적인 클래스로 만들 것인지 아니며 Component를 상속(extend)하여 만들 것인지 먼저 결정해야 한다.
		  권장되는 방법은 기능적으로 가장 근접한 클래스를 base 클래스로 상속해서 기능을 확장하는 것이다. 이 경우 Ext JS가 제공하는 필요할 때 자동으로 랜도링 해준다던가, 컴포넌트의 사이즈와 위치를 자동으로 결정해주는 등 적당한 레이아웃 매니저에 의한 관리
		 및 컨테이너로부터 제거될 때 자동으로 소멸 시켜주는 등의 자동화된 생명주기 관리를 받을 수 있는 장점이 있다.
		  반면에, 새로운 클래스의 컴포넌트이면서 Ext JS컴포넌트 계층에 해당되지 않고, 외부로부터 랜더링 및 관리를 통제받아야 한다면 새로운 클래스를 작성하는 편이 나을 것이다.
	
	2) 서브 클래싱(Subclassing)
		: 클래스 시스템은 Ext JS 프레임워크의 어떤 부분이라도 손쉽게 확장할 수 있도록 한다. Ext.Base는 모든 Ext JS 클래스의 기본단위로서 이 클래스의 정적 멤버(static member)들과 프로토타입은 다른 모든 클래스들이 상속한다.
		  가장 최하위 수준인 Ext.Base를 이용해서 사용자만의 기능을 추가할 수도 있겠지만 거의 대부분의 경우에 상속 체인에서 좀 더 높은 수준의 클래스로부터 확장하고 싶을 것이다. 다음 예는 Ext.Component클래스의 서브 클래스를 생성하는 것이다.
		  
		ex)
			Ext.define('My.custom.Component',{
				extend : 'Ext.Component',
				newMethod : function(){
					//...
				}
			});
		
		# 위에서는 My.custom.Component라는 이름의 새 클래스를 만들고 Ext.Component의 모든 기능(메서드, 프로퍼티, 기타 등등)을 상속받았으며, 새로운 메서드 혹은 프로퍼티를 추가하고 있다.	
	
	3) 템플릿 메서드
		: Ext JS 서브 클래스에서만 나타나는 특징으로 위임(delegate)을 위해 템플릿 메서드 패턴(Template method pattern)을 사용하고 있다. 이것은 상속 체인에 속하는 각 클래스가 컴포넌트 생애주기에 대해 로직의 일부을 "기부"함을 의미한다.
		 각 클래스는 자신의 로직을 다른 상속 체인에 속하는 다른 클래스에 기부하도록 허용하는 자신만의 특정한 속성을 갖도록 구현된다.
		  render 함수를 예로 들어 render는 Component의 생애주기 중 랜더링 단게에서 초기화 되도록 만들어져있다. render는 절대 오버라이드 할 수 없으며, 파생 클래스에서 특정적인 처리가 필요할 때 onRender 메서드를 서브클래스에 추가해서
		 처리하도록 한다. 모든 onRender 메서드는 extra logic을 "기부"하기 전에 반드시 수퍼클래스의 onRender메서드를 호출해야 한다.
		  아래의 그림은 onRender 템플릿 메서드를 설명한 다이어그램이다.
		  render메서드는 컨테이너의 레이아웃 매니저에 의해 호출되는데, 이 메서드는 오버라이드 될 수 없고, ext base클래스에 의해 구현되다. render메서드의 호출은 다시 현재 서브 클래스의 this.onRender를 호출하게 된다. 이 호출은 수퍼 클래스
		 버전의 onRender 메서드 호출로 이어졌다. 최종적으로는 각 상속 체인 상의 각 클래스들은 제 각각의 기능을 기부한 후 render 메서드의 제어권을 반환하게 된다.
		  아래의 그림은 onRender 템플릿 메서드를 설명한 다이어그램이다.
		  render 메서드는 컨테이너의 레이아웃 매니저에 의해 호출되는데, 이 메서드는 오버라이드 될 수 없고 Ext base 클래스에 의해 구현된다. rneder 메서드의 호출은 다시 현재 서브 클래스의 this.onRender를 호출하게 된다. 
		  이 호출은 수퍼 클래스 버전의 onRender 메서드 호출로 이어진다. 최종적으로 각 상속 체인 상의 각 클래스들은 제 각각의 기능을 기부한 후 render 메서드의 제어권을 반환하게 된다.  
		
		ex)
			Ext.define('My.custom.Component',{
				extend : 'Ext.Component',
				onRender : function(){
					this.callParent(arguments);
				}
			});   
		
		# 대부분의 템플릿 메서드들이 연관된 이벤트를 갖는다는 점은 중요한데, 예를 들어 Component가 랜더링 되면 render 이벤트가 발생된다. 서브 클래스를 사용할 때 이벤트가 아니라 생애주기에서 중요한 단계에서 클래스 로직을 수행하기 위해 템플릿 메서드를 사용해야
		 한다는 점을 주의하자. 이벤트는 프로그래밍을 통해 연기 될 수도 있으며 핸들러에 의해 중지될 수도 있기 때문이다.
		  아래는 Component의 서브 클래스에서 구현된 템플릿 메서드들이다.
		  
		  - initComponent : 생성자에 의해 호출된다. 주로 데이터 초기화, 설정 셋업, 이벤트 핸들러를 추가할 때 사용된다.
		  - beforeShow : Component가 보여질 때 호출되는 메서드
		  - onShow : Show 동작에 추가적인 무엇인가를 하고 싶다면 사용, 수퍼 클래스의 onShow를호출한 다음에 컴포넌트가 visible 상태가 될 것이다.
		  - afterShow : Component가 보여지고 난 후 호출되는 메서드
		  - onShowComplete : afterShow 메서드가 완료되고 나면 호출
		  - onHide : hide 동작에 추가적인 처리 허용, 수퍼 클래스의 onHide를 먼저 호출해야 컴포넌트가 숨겨진다.
		  - afterHide : 컴포넌트가 감춰지고 난 후 호출
		  - onRender : 랜더링 단계에 추가 작업을 위한 메서드
		  - afterRender : 렌더링 완료되고 난 후 추가적인 작업을 지원, 이 단계에서 컴포넌트 엘리먼트가 설정에 따라 스타일이 적용되고 설정된 CSS 클래스 이름의 추가와 visibility 설정, enable 상태의 제어가 가능해진다.
		  - onEnable : enable 동작에 대해 추가적인 동작을 가능하게 한다. 수퍼 클래스의 onEnable 호출이 먼저 필요하다.
		  - onDisable : disable 동작에 대해 추가적인 동작을 가능하게 한다. 수퍼 클래스의 onDisable 메서드를 먼저 호출해야 한다.
		  - onAdded : 컴포넌트가 컨테이너에 추가될 때 문어가 처리르 가능하게 해주는 메서드, 이 단계에서 컴포넌트는 부모 컨테이너의 자식 아이템 컬랙션의 하나로 존재하게 된다. 수퍼 클래스의 onAdded 메서드 호출이 완료된 후에 ownerCt 래퍼런스가 
		   가능하게 되며, ref가 설정되어 있었다면 refOwner가 설정될 것이다. 
		  - onRemoved : 컴포넌트가 부모 컨테이너로부터 제거될 때의 동작을 지정한다. 이 단계에서는 부모 컨테이너의 잣기 아이템 컬렉션에서는 제거되지만 소멸 되지는 않는 단계로서, (만약 부모 컨테이너의 설정이 autoDestroy가 true일 경우 혹은 
		   두번째 파라미터로 remove call이 전달되었을 경우에는 소멸) 수퍼 클래스의 onRemoved 호출 후에 ownerCt와 refOwner는 존재하지 않게 된다. 
		  - onResized : 리사이즈 동작 시 호출되는 메서드
		  - onPosition : 위치에 관한 동작 시 호출되는 메서드
		  - onDestroy : 소멸 동작 시 호출되는 메서드로서 수퍼 클래스의 onDestroy 호출이 끝나면 컴포넌트가 소멸된다.
		  - beforeDestroy : 컴포넌트 소멸전에 호출
		  - afterSetPosition : 컴포넌트 위치가 설정 완료되면 호출
		  - afterComponentLayout : 컴포넌트의 레이아웃이 조절완료 되면 호출
		  - beforeComponentLayout : 컴포넌트 레이아웃이 조절되기 전에 호출
		
	4) 어떤 클래스가 (상속되어) 확장되나?
		: 확장을 위한 베이스 클래스를 선정하는 것이 주로 효율성을 따지게 되는데 베이스 클래스가 반드시 제공해야 하는 기능이 무엇인가에 관한 것이다. Ext.panel.Panel은 베이스 클래스로서 잘 선택되는 경향이 있는데 이는 패널 클래스가 갖는 다음 특징 때문이다.
		
			- Border
			- Header
			- Header tools
			- Footer
			- Footer buttons
			- Top toolbar
			- Bottom toolbar
			- 자식 컴포넌트를 포함 및 관리			
		
		4-1) 컴포넌트
			: 요구되는 UI 컴포넌트가 다른 컴포넌트르 포함할 필요가 없어서 HTML 형태의 포을 캡슐화하는 것으로 충분하다면 Ext.Component를 확장하는 것이 적합할 것이다. 예제의 코드는 HTML 이미지 엘리먼트를 랩핑해서 이미지의 src 속성을 설정하거나 얻을 수 있돌고 한
			 Ext.Component 확장 클래스의 예다. 이 클래스는 이미지가 로드되면 load 이벤트를 발생시킨다.
			 
			 ex) 
			 	Ext.define('Ext.ux.Image',{
					extend : 'Ext.Component',
					alias : 'widget.managedimage',
					autoEl : {
						tag : 'img',
						src : Ext.BLANK_IMAGE_URL,
						cos : 'my-managed-image'
					},
					onRender : function(){
						this.autoEL = Ext.apply({},this.initalConfig, this.autoEL);
						this.callParent(arguments);
						this.el.con('load', this.onLoad.this);
					},
					onLoad : function(){
						this.fireEvent('load',this)
					},
					setSrc : function(){
						if(this.rendered){
							this.el.dom.src = src;
						} else {
							this.src = src;
						}
					},
					
					getSrc : function(){
						return this.el.dom.src || this.src;
					}			 	
			 	});
			 
			 ex)
			 	var image = Ext.create('Ext.ux.Image');
			 	Ext.create('Ext.panel.Panel',{
			 		title : 'Image Panel',
			 		heigth : 200,
			 		renderTo : Ext.getBody(),
			 		itmes : {image}
			 	});	
			 	image.on('load', function(){
			 		console.log('image loaded:', image.getSrc() )
			 	});
			 	
			 	image.setSrc('http://~');
			 	
			 # 주의 : 위 에제는 예제로서만 참고하자. 실제 어플리케이션 개발 시에는 Ext.Img클래스를 사용해서 이미지를 관리하면 된다.
			 	
		4-2) 컨테이너
			: 만들어야 하는 UI컨테이너가 다른 컴포넌트를 포함해야 하지만 앞서 설명한 Panel 클래스의 기능까지는 필요 없다면 Ext.container.Container 클래스를 확장하는 것이 적합할 것이다. 컨테이너 수준에서 Ext.layout.container.Container 클래스가
			 자식 컴포넌트를 랜더링 하고 관리한다는 중요한 사시을 기억하라.
			  컨테이너는 다음과 같은 추가적인 템플릿 메서드를 갖는다.
			  
				- onBeforeAdd : 이 메서드는 새로운 자식 컴포넌트를 추가하기 전에 호출된다. 새로운 컴포넌트를 전달하면 컴포넌트를 수정하거나 컨테이너를 어떤 방법으로 준비시키기 위해 사용되는데 add동작이 중단되면 false를 리턴한다.
				- onAdd : 새 자식 컴포넌트의 추가가 완료되면 호출된다. 새로 등록된 컴포넌트르 전달한다. 이 메서드는 자식 아이템의 상태에 따라 내부 구조를 업데이트 할 필요가 있을 때 사용한다.
				- onRemove : 새롭게 추가된 컴포넌트가 컨테이너에서 제거 완료되면 호출된다. onAdd와 마찬가지로 자식 아이템의 상태에 따라 내부 구조를 업데이트할 때 주로 사용한다. 
				- beforeLayout : 컨테이너의 자식 컴포넌트가 레이아웃이 실행되기 전에 (혹은 랜더링 되면) 호출된다.
				- afterLayer : 자식 컴포넌트의 레이아웃이 완료되면 실행된다.
		
		4-3) 패널
			: 새로 만들고자 하는 UI 컴포넌트가 반드시 header, footer 혹은 toolbar가 있어야 한다면 Ext.panel.Panel 클래스가 확장을 위한 베이스 클래스로 적합하다.
			  중요). Panel은 컨테이너다. 따라서 랜더링 및 자식 컴포넌트 관리를 위해서는 Layout을 사용해야 한다는 점을 기억하자
			  Ext.panel.Panel 클래스를 확장한 클래스는 통상 어플리케이션 특정적인 형태를 갖는 것이 일반적이며, 다른 UI 컴포넌트(통상 컨테이너 또는 폼 필드)를 설정된 Layout에 모으고, tbar 및 bbar와 유사한 형태로 기능을 제공할 때가 많다.
			  패널은 다음과 같은 추가적인 템플릿 메서드를 제공한다.
			  
			  	- afterCollapse : 패널이 접혔을 때 호출된다.
			  	- afterExpand 패널이 펼쳐졌을 때 호출된다.
			  	- onDockedAdd : 도킹 아이템이 패널에 추갇외고 나서 호출된다.
			  	- onDockerRemove : 도킹 아이템이 패널에서 제거되면 호출된다.

4. 데이터 패키지
	: 데이터 패키지는 어플리케이션에서 로딩하고 저장할 모든 데이터를 처리한다. 여러 개의 클래스로 되어 있지만, 그 중에 가장 중요한 세가지를 소개하자면 다음과 같다.
	
		- Ext.data.Model
		- Store
		- Ext.data.proxy.Proxy
	
	# 위 3개 클래스는 거의 모든 어플리케이션에서 사용되며, 아래 그림과 같이 위성 모양의 관계를 갖는 다수의 다른 클래스에 의해 지원을 받고 있다.	 
	
4-1. 모델
	: 데이터 패키지의 가장 중심은 바로 Ext.data.Model이다. 모델은 어플리케이션의 엔티티를 대표하는데, 예를 들면 전자상거래 앱은 Users, Products, Orders와 같은 모델들을 갖게 된다. 가장 단순하게 말하자면 모델은 필드 세트와 이와 연관된 비즈니스 로직이라고 
	 정의할 수 있다. 
	  모델을 구성하느 일부 기본적인 부분들을 살펴보자.
		
		[Ext.data.Model]
		- Fields : String, Integer, Float, Boolean
		- Proxies : AJAX, REST, Localstorage, JSON-P
		- Validations : Presence, Format, Length, Custom
		- Associations : ManyToOne, OneToOne, ManyToMany
	
	1). 모델 만들기
		: 나에게 필요한 모델을 만드는 가장 좋은 방법은 베이스 클래스에서 시작하는 것이다. 베이스 클래스를 확장하여 모델을 생성하는 방법은 한번에 원하는 목적의 모델을 손쉽게 구성하면서 스키마를 설정할 수 있다는 장점이 있다. 스키마(Schema)는 어플리케이션의 모든 
		 모델을 관리를 담당한다. 다음 예를 보자.
		 
		 ex)
		 	Ext.define('Study.model.Base',{
		 		extend : 
		 	});

4-2. 스토어

4-3. 결합(Associations)

4-4. 검증(Validations)

5. 드래그 & 드롭

6. 이벤트

7. 레이아웃과 컨테이너

8. 현지화

9. 메모리 누수 식별

10. RTL 지원

11. 태블릿 지원

12. 테마

13. 그리기 패키지	 



	 
	 
	 